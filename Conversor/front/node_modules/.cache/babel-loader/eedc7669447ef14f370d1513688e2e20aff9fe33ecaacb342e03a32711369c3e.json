{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./styles.css\";\n\n// const ConversionApp = () => {\n//   const [conversionType, setConversionType] = useState(\"kmToMiles\");\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [result, setResult] = useState(\"\");\n//   const [savedConversions, setSavedConversions] = useState([]);\n\n//   const handleConversionTypeChange = (e) => {\n//     setConversionType(e.target.value);\n//     setInputValue(\"\");\n//     setResult(\"\");\n//   };\n\n//   const handleInputChange = (e) => {\n//     const value = e.target.value;\n//     setInputValue(value);\n\n//     const convertedValue = convert(value, conversionType);\n//     setResult(convertedValue);\n//   };\n\n//   const convert = (value, type) => {\n//     let resultValue;\n//     let conversionType;\n\n//     switch (type) {\n//       case \"kmToMiles\":\n//         resultValue = (value * 0.621371).toFixed(2);\n//         conversionType = \"Millas\";\n//         break;\n//       case \"milesToKm\":\n//         resultValue = (value * 1.60934).toFixed(2);\n//         conversionType = \"Kilómetros\";\n//         break;\n//       case \"feetToMeters\":\n//         resultValue = (value * 0.3048).toFixed(2);\n//         conversionType = \"Metros\";\n//         break;\n//       case \"metersToFeet\":\n//         resultValue = (value * 3.28084).toFixed(2);\n//         conversionType = \"Pies\";\n//         break;\n//       case \"cmToInches\":\n//         resultValue = (value * 0.393701).toFixed(2);\n//         conversionType = \"Pulgadas\";\n//         break;\n//       case \"inchesToCm\":\n//         resultValue = (value * 2.54).toFixed(2);\n//         conversionType = \"Centímetros\";\n//         break;\n//       default:\n//         resultValue = \"\";\n//         conversionType = \"\";\n//     }\n\n//     return {\n//       result: resultValue,\n//       type: conversionType,\n//     };\n//   };\n\n//   const saveConversion = () => {\n//     const { result: resultValue, type: conversionType } = result; // Desestructurar result\n\n//     const savedConversion = {\n//       type: conversionType,\n//       input: inputValue,\n//       result: resultValue,\n//     };\n\n//     setSavedConversions([...savedConversions, savedConversion]);\n//     setInputValue(\"\");\n//     setResult(\"\");\n//   };\n\n//   const deleteConversion = (index) => {\n//     const updatedConversions = [...savedConversions];\n//     updatedConversions.splice(index, 1);\n//     setSavedConversions(updatedConversions);\n//   };\n\n//   const swapConversion = () => {\n//     setInputValue(result.result);\n//     setResult(inputValue);\n//   };\n//   useEffect(() => {\n//     setResult(convert(inputValue, conversionType));\n//   }, [inputValue, conversionType]);\n\n//   return (\n//     <div className=\"container\">\n//       <h1>convert</h1>\n//       <div className=\"content\">\n//         <div className=\"selector\">\n//           <select\n//             className=\"select\"\n//             value={conversionType}\n//             onChange={handleConversionTypeChange}\n//           >\n//             <option value=\"kmToMiles\">Kilómetros a Millas</option>\n//             <option value=\"milesToKm\">Millas a Kilómetros</option>\n//             <option value=\"feetToMeters\">Pies a Metros</option>\n//             <option value=\"metersToFeet\">Metros a Pies</option>\n//             <option value=\"cmToInches\">Centímetros a Pulgadas</option>\n//             <option value=\"inchesToCm\">Pulgadas a Centímetros</option>\n//           </select>\n//           <button className=\"swap-button\" onClick={swapConversion}>\n//             &#8646;\n//           </button>\n//           <input\n//             className=\"input\"\n//             type=\"text\"\n//             value={inputValue}\n//             onChange={handleInputChange}\n//           />\n//           <div className=\"result\">\n//             {result.result && `${result.result} ${result.type}`}\n//           </div>\n//         </div>\n//         <div className=\"save-button-position\">\n//           <button className=\"save-button\" onClick={saveConversion}>\n//             <p>❤️</p>\n//           </button>\n//         </div>\n//       </div>\n//       <div>\n//         {\" \"}\n//         <h2>saved</h2>\n//         <ul>\n//   {savedConversions.map((conversion, index) => (\n//     <li key={index}>\n//       {conversion.input} {conversion.type === conversionType ? \"=\" : \"↔\"}{\" \"}\n//       {conversion.result} {conversion.type}\n//       <button onClick={() => deleteConversion(index)}>X</button>\n//     </li>\n//   ))}\n// </ul>\n\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ConversionApp;","map":{"version":3,"names":[],"sources":["/var/www/Oxygen-Academy/src/components/ConversionApp.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./styles.css\";\n\n// const ConversionApp = () => {\n//   const [conversionType, setConversionType] = useState(\"kmToMiles\");\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [result, setResult] = useState(\"\");\n//   const [savedConversions, setSavedConversions] = useState([]);\n\n//   const handleConversionTypeChange = (e) => {\n//     setConversionType(e.target.value);\n//     setInputValue(\"\");\n//     setResult(\"\");\n//   };\n\n//   const handleInputChange = (e) => {\n//     const value = e.target.value;\n//     setInputValue(value);\n\n//     const convertedValue = convert(value, conversionType);\n//     setResult(convertedValue);\n//   };\n\n//   const convert = (value, type) => {\n//     let resultValue;\n//     let conversionType;\n\n//     switch (type) {\n//       case \"kmToMiles\":\n//         resultValue = (value * 0.621371).toFixed(2);\n//         conversionType = \"Millas\";\n//         break;\n//       case \"milesToKm\":\n//         resultValue = (value * 1.60934).toFixed(2);\n//         conversionType = \"Kilómetros\";\n//         break;\n//       case \"feetToMeters\":\n//         resultValue = (value * 0.3048).toFixed(2);\n//         conversionType = \"Metros\";\n//         break;\n//       case \"metersToFeet\":\n//         resultValue = (value * 3.28084).toFixed(2);\n//         conversionType = \"Pies\";\n//         break;\n//       case \"cmToInches\":\n//         resultValue = (value * 0.393701).toFixed(2);\n//         conversionType = \"Pulgadas\";\n//         break;\n//       case \"inchesToCm\":\n//         resultValue = (value * 2.54).toFixed(2);\n//         conversionType = \"Centímetros\";\n//         break;\n//       default:\n//         resultValue = \"\";\n//         conversionType = \"\";\n//     }\n\n//     return {\n//       result: resultValue,\n//       type: conversionType,\n//     };\n//   };\n\n//   const saveConversion = () => {\n//     const { result: resultValue, type: conversionType } = result; // Desestructurar result\n\n//     const savedConversion = {\n//       type: conversionType,\n//       input: inputValue,\n//       result: resultValue,\n//     };\n\n//     setSavedConversions([...savedConversions, savedConversion]);\n//     setInputValue(\"\");\n//     setResult(\"\");\n//   };\n\n//   const deleteConversion = (index) => {\n//     const updatedConversions = [...savedConversions];\n//     updatedConversions.splice(index, 1);\n//     setSavedConversions(updatedConversions);\n//   };\n\n//   const swapConversion = () => {\n//     setInputValue(result.result);\n//     setResult(inputValue);\n//   };\n//   useEffect(() => {\n//     setResult(convert(inputValue, conversionType));\n//   }, [inputValue, conversionType]);\n\n//   return (\n//     <div className=\"container\">\n//       <h1>convert</h1>\n//       <div className=\"content\">\n//         <div className=\"selector\">\n//           <select\n//             className=\"select\"\n//             value={conversionType}\n//             onChange={handleConversionTypeChange}\n//           >\n//             <option value=\"kmToMiles\">Kilómetros a Millas</option>\n//             <option value=\"milesToKm\">Millas a Kilómetros</option>\n//             <option value=\"feetToMeters\">Pies a Metros</option>\n//             <option value=\"metersToFeet\">Metros a Pies</option>\n//             <option value=\"cmToInches\">Centímetros a Pulgadas</option>\n//             <option value=\"inchesToCm\">Pulgadas a Centímetros</option>\n//           </select>\n//           <button className=\"swap-button\" onClick={swapConversion}>\n//             &#8646;\n//           </button>\n//           <input\n//             className=\"input\"\n//             type=\"text\"\n//             value={inputValue}\n//             onChange={handleInputChange}\n//           />\n//           <div className=\"result\">\n//             {result.result && `${result.result} ${result.type}`}\n//           </div>\n//         </div>\n//         <div className=\"save-button-position\">\n//           <button className=\"save-button\" onClick={saveConversion}>\n//             <p>❤️</p>\n//           </button>\n//         </div>\n//       </div>\n//       <div>\n//         {\" \"}\n//         <h2>saved</h2>\n//         <ul>\n//   {savedConversions.map((conversion, index) => (\n//     <li key={index}>\n//       {conversion.input} {conversion.type === conversionType ? \"=\" : \"↔\"}{\" \"}\n//       {conversion.result} {conversion.type}\n//       <button onClick={() => deleteConversion(index)}>X</button>\n//     </li>\n//   ))}\n// </ul>\n\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ConversionApp;\n\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}